//左高树，高度优先可并堆
//黑书里写的貌似有点问题，自己重写了一下
//注意节点要引用，否则会出错
#include<iostream>
#include<unordered_map>
#include<algorithm>
#include<string>
#include<queue>
#include<stack>
#include<iterator>
using namespace std;

#define iout(x) ostream_iterator<x>(cout," ")
#define deft template<class T>				//hblt heigth biased length tree
deft
struct treeNode
{
	pair<int, T> element;
	treeNode* leftNode,
		*rightNode;
	treeNode()
	{
		leftNode = rightNode = NULL;
	}
	treeNode(T &theElement)
	{
		element.first = 1, element.second = theElement;
		this->leftNode = NULL;
		this->rightNode = NULL;
	}
	treeNode(const T theElement, treeNode* left, treeNode* right)
	{
		element->first = 1, element->second = theElement;
		this->leftNode = left, this->rightNode = right;
	}
};
deft
class maxHblt
{
private:
	treeNode<T>* root;		
	int theSize;			//the capacity of the binary tree
public:
	void initialize(T* theArr, int size);
	void meld(treeNode<T>* &x, treeNode<T>* &y);
	void meld(maxHblt<T>& theCopy);
	T top() { return root->element.second; }
	void pop();
	void push(T theElement);
	friend void pp(maxHblt &c);
};
deft
void pp(maxHblt<T> &c)
{
	cout << c.theSize;
}
deft
void maxHblt<T>::meld(treeNode<T>* &x, treeNode<T>* &y)
{
	if (y == NULL) return;
	if (x == NULL)
	{
		x = y;
		return;
	}
	if (x->element.second < y->element.second)
		swap(x, y);
	meld(x->rightNode, y);
	if (x->leftNode == NULL)
	{
		x->leftNode = x->rightNode;
		x->rightNode = NULL;
		x->element.first = 1;
	}
	else
	{
		if (x->leftNode->element.first < (x->rightNode->element).first)
		{
			swap(x->leftNode, x->rightNode);
			x->element.first = x->rightNode->element.first + 1;
		}
	}
}
deft
void maxHblt<T>::meld(maxHblt& theCopy)
{
	meld(this->root, theCopy.root);
	theSize += theCopy.theSize;
	theCopy.root = NULL, theCopy.theSize = 0;
}
deft
void maxHblt<T>::push(T theElement)
{
	treeNode<T>* newTree = new treeNode<T>(theElement);
	meld(this->root, newTree);
	++theSize;
}
deft
void maxHblt<T>::pop()
{
	auto t1 = root->leftNode,
		t2 = root->rightNode;
	delete root;
	root = t1;
	meld(root, t2);
	--theSize;
}
deft
void maxHblt<T>::initialize(T* theArr, int size)
{
	queue<treeNode<T>*> q;
	for (int i = 1; i <= size; ++i)
	{
		treeNode<T>* node = new treeNode<T>(theArr[i]);
		q.push(node);
	}
	while (q.size() != 1)
	{
		auto t1 = q.front(); q.pop();
		auto t2 = q.front(); q.pop();
		meld(t1, t2);
		q.push(t1);
	}
	this->root = q.front();
	theSize = size;
}
int main()
{
	int* arr = new int[6]{ 1,2,1,5,23};
	maxHblt<int> hblt;
	hblt.initialize(arr, 4);
	hblt.push(233);
	hblt.push(1311);
	int* arr2 = new int[10]{ 2,3,4,4,4244,55,6,6,6,8 };	//test data
	maxHblt<int> hblt2;
	hblt2.initialize(arr2, 9);
	hblt2.push(9289);
	hblt.meld(hblt2);
	hblt.push(31137);
	hblt.push(131331);
	hblt.push(3131);
	for (int i = 0; i < 4; ++i)
		hblt.pop();
	cout << hblt.top() << endl;
	pp(hblt);		//4+9+1+1+1
	return 0;
}
