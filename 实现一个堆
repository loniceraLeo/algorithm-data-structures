//stl自带的heap真是慢，而且抹消了其多态性。于是我又造了一次轮子。。。代码如下
//12.17 通过动态增长数组解决了一个bug，经测试无误,ps:增加了两个方法,动态增长数组函数可以使用友元函数
#include<iostream>
#include<unordered_map>
#include<algorithm>
#include<string>
#include<queue>
#include<iterator>
using namespace std;

#define iout(x) ostream_iterator<x>(cout," ")
#define deft template<class T>
deft
class maxheap
{
private:
	T* heapArray;
	int theLength;
	int heapSize;
public:
	T top();
	void pop();
	void initialize(T* theArray, int theLength);
	void push(const T& theElement);
	void changeTheLength(int length);
	bool empty();
	void output();
};
deft
void maxheap<T>::output()
{
	cout << this->heapSize << endl << this->theLength;
}
deft
bool maxheap<T>::empty()
{
	return theLength == 0;
}
deft
T maxheap<T>::top()
{
	return heapArray[1];
}
deft
void maxheap<T>::initialize(T* theArray, int thenewLength)
{
	//if (this->theLength)
	//{
		//delete[]heapArray;
	//	theLength = 0;
//	}
	heapArray = theArray;
	theLength = thenewLength;
	heapSize = theLength;
	for (int root = theLength / 2; root >= 1; --root)
	{
		int father = root,
			child = root * 2;
		T currentNode = heapArray[father];
		while (child <= theLength)
		{
			if (heapArray[child + 1] > heapArray[child])
				child++;
			if (currentNode > heapArray[child]) break;
			heapArray[father] = heapArray[child];
			father = child;
			child *= 2;
		}
		heapArray[father] = currentNode;
	}
}
deft
void maxheap<T>::push(const T& theElement)
{
	if (theLength == heapSize)
	{
		changeTheLength(theLength);
		heapSize *= 2;
	}
	heapArray[++theLength]=theElement;
	int currentNode = theLength;
	auto theCopy = theElement;
	while (currentNode != 1)
	{
		if (heapArray[currentNode / 2] > theCopy) break;
		heapArray[currentNode] = heapArray[currentNode / 2];
		currentNode /= 2;
	}
	heapArray[currentNode] = theCopy;
}
deft
void maxheap<T>::pop()
{
	heapArray[1].~T();
	int father = 1,
		child = 2;
	auto temp = heapArray[theLength--];
	while (child <= theLength)
	{
		if (heapArray[child + 1] > heapArray[child])
			++child;
		if (temp > heapArray[child]) break;//life is short,code is long
		heapArray[father] = heapArray[child];
		father = child;
		child *= 2;
	}
	heapArray[father] = temp;
}
deft
void maxheap<T>::changeTheLength(int length)
{
	T* newArray = new T[2 * length+1];
	fill(newArray, newArray + 2 * length+1, 0);
	for (int i = 1; i <= length; ++i)
		newArray[i] = heapArray[i];
	delete[]heapArray;
	heapArray = newArray;
}
int main()
{
	int* d = new int[6]{ 2,33113,1123,62333,512313,10222 };
	maxheap<int> mh;
	mh.initialize(d, 5);
	for (int i = 0; i < 5; ++i)
		mh.pop();
	mh.push(200);
	mh.push(211);
	mh.push(333);
	mh.push(566);
	mh.push(21);
	mh.push(2223);
	mh.push(23);
	mh.push(23312);
	mh.push(333);
	mh.push(78);
	mh.push(13);
	mh.push(3);
	cout << mh.top() << endl;
	mh.output();
	return 0;
}
